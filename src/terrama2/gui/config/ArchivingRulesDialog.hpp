/************************************************************************************
TerraMA² is a development platform of Monitoring, Analysis and Alert for
geoenvironmental extremes. Applied to natural disasters, quality of water / air / atmosphere,
tailings basins, epidemics and others.Copyright © 2012 INPE.

This code is part of the TerraMA² framework.
This framework is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

You should have received a copy of the GNU General Public
License along with this library.

The authors reassure the license terms regarding the warranties.
They specifically disclaim any warranties, including, but not limited to,
the implied warranties of merchantability and fitness for a particular purpose.
The library provided hereunder is on an "as is" basis, and the authors have no
obligation to provide maintenance, support, updates, enhancements,
or modifications.

In no event shall INPE or K2 SISTEMAS be held liable to any party for direct, indirect,
special, incidental, or consequential damages arising out of the use of this
library and its documentation.
*************************************************************************************/

#ifndef _ARCHIVING_RULESDLG_H_
#define _ARCHIVING_RULESDLG_H_

// TerraMA2
#include "analysisList.h"
#include "remoteWeatherServerList.h"
#include "ArchivingItemsListDialog.hpp"
#include "Services.hpp"

// Generated by QT
#include "ui_ArchivingRulesDialog.h"

// QT
#include <QProcess>

class ArchivingRulesDialog : public QDialog, private Ui::ArchivingRulesDialog
{
Q_OBJECT

public:
	ArchivingRulesDialog(QString configFileName, Services* manager, QWidget* parent = 0, Qt::WFlags f = 0 );
	~ArchivingRulesDialog();
	std::vector<struct wsArchivingRule> getFields();
	void setFields(std::vector<struct wsArchivingRule> archivingRules);

private slots:
	void executeArchiving();
	void addItem();
	void deleteItem();
	void itemUpdate(QTableWidgetItem*);
	void readArchivingError();
	void archivingFinishedSlot(int exitCode);
  
private:
	void enableButtons(bool enable);
	QString conditionIntToStr(int cond);
	void getConditionIntAndStr(int cond, int& value, QString& str);
	QString createFilterToStr(wsArchivingRuleType ruleType, bool createFilter);

	QList< QPair<QString, int> > _conditionList;
	Services*   _manager;
	RemoteWeatherServerList* _remoteWeatherServerList;
	AnalysisList* _analysisList;
	QProcess _process;
	bool _changed;
	QString _configFileName;
};


#endif

