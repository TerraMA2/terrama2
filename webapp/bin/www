#!/usr/bin/env node

'use strict';

/**
 * It defines which context nodejs should initialize. The context names are available in {@link config/instances}
 * @typeof {string}
 */
var nodeContext = process.argv[2];

/**
 * It defines which port nodejs should use. When this variables is used, it overrides port number from {@link config/instances}
 */
var nodeContextPort = process.argv[3];

/**
 * It defines TerraMA² global configuration (Singleton). Make sure it initializes before everything
 *
 * @type {Application}
 */
var Application = require("./../core/Application");

/**
 * It defines TerraMA² logger library
 * @type {winston.Logger}
 */
var logger = require("./../core/Logger");

// setting currentContext
Application.setCurrentContext(nodeContext);

/**
 * Module dependencies.
 */
var Database = require('./../config/Database');
var PluginLoader = require("../core/PluginLoader");
var DataManager = require("../core/DataManager");
var HTTPFactory = require("./../config/HTTPFactory");
var PortScanner = require("./../core/PortScanner");
var io = require('../io');
var debug = require('debug')('webapp:server');
var load = require('express-load');
var path = require('path');
var exec = require('child_process').exec;
var TcpService = require("./../core/facade/tcp-manager/TcpService");

var app = require('../app');

var portNumber = '36000';

// storing active connections
var connections = {};
var settings = Application.getContextConfig();

var debugMessage = "";

if (PortScanner.isValidPort(settings.port)) {
  portNumber = settings.port;
} else {
  debugMessage = "No valid port found. The default port " + portNumber + " will be used";
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || portNumber);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = HTTPFactory.create(app, settings);

if (debugMessage) {
  logger.debug(debugMessage);
}
logger.info("Initializing TerraMA2 on port " + port);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);

// approach for handling connections and remove it to avoid unclosed nodejs server
server.on('connection', function(conn) {
  var key = conn.remoteAddress + ':' + conn.remotePort;
  connections[key] = conn;

  conn.on('close', function() {
    delete connections[key];
  });
});

server.on('error', onError);
server.on('listening', onListening);
server.on('close', onClose);

// detecting sigint error and then close server
process.on('SIGINT', function(){
  DataManager.finalize().then(function() {
    var _closeServer = function() {
      server.close(function() {
        logger.info("TerraMA2 finalized");
      });

      for (var key in connections)
        connections[key].destroy();
    };

    TcpService.finalize();
    TcpService.disconnect();

    _closeServer();
  });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for server close. It unloads plugins
 */
function onClose() {
  PluginLoader.plugin.unloadAll();
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  debug('Listening on ' + bind);
}

io.attach(server);
load('sockets').into(io);

// getting db configuration and initializes data manager
return DataManager.init(null, function (error) {
  if (error) {
    logger.error(error);
    return process.exit(1);
  }

  // loading terrama2 data
  return DataManager.load().then(function() {
    var applicationPath = path.join(__dirname, './../..');

    exec("python " + applicationPath + "/share/terrama2/scripts/update_database.py " + applicationPath, function(err, stdout, stderr) {
      if(err)
        throw new Error("Failed to update database.");

      // initialize service listeners
      return TcpService.init().finally(function() {
        return PluginLoader.initialize(__dirname + "/../plugins/");
      });
    });
  }).catch(function(err) {
    logger.error("Could not load datamanager: " + err.message);
    process.exit(1);
  });
});
