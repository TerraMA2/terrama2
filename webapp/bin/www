#!/usr/bin/env node

'use strict';

/**
 * It defines TerraMA² global configuration (Singleton). Make sure it initializes before everything
 *
 * @type {Application}
 */
const Application = require("./../core/Application");

/**
 * It defines TerraMA² logger library
 * @type {winston.Logger}
 */
var logger = require("./../core/Logger");

/**
 * Module dependencies.
 */
var DataManager = require("../core/DataManager");
var HTTPFactory = require("./../core/utility/HTTPFactory");
var PortScanner = require("./../core/PortScanner");
var io = require('../io');
var debug = require('debug')('webapp:server');
var load = require('express-load');
var path = require('path');
var child_process = require('child_process');
var TcpService = require("./../core/facade/tcp-manager/TcpService");

var app = require('../app');

var portNumber = '36000';

// storing active connections
var connections = {};
var settings = Application.getContextConfig();

var debugMessage = "";

if (PortScanner.isValidPort(settings.port)) {
  portNumber = settings.port;
} else {
  debugMessage = "No valid port found. The default port " + portNumber + " will be used";
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || portNumber);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = HTTPFactory.create(app, settings);

if (debugMessage) {
  logger.debug(debugMessage);
}
logger.info("Initializing TerraMA² on port " + port);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);

// approach for handling connections and remove it to avoid unclosed nodejs server
server.on('connection', function (conn) {
  var key = conn.remoteAddress + ':' + conn.remotePort;
  connections[key] = conn;

  conn.on('close', function () {
    delete connections[key];
  });
});

server.on('error', onError);
server.on('listening', onListening);

// detecting sigint error and then close server
process.on('SIGINT', async () => {
  logger.info('Finalizing TerraMA²...')
  await DataManager.finalize();

  TcpService.finalize();
  TcpService.disconnect();

  server.close(() => {
    logger.info('TerraMA² finalized');

    process.exit(0);
  });

  for (var key in connections)
    connections[key].destroy();
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  debug('Listening on ' + bind);
}

io.attach(server);
load('sockets').into(io);

(async () => {
  const Database = require('./../core/utility/Database');

  try {

    var orm = await Database.init();
  } catch (err) {
    console.log(err);
  }

  // getting db configuration and initializes data manager
  DataManager.init(orm)
    .catch(error => {
      logger.error(error);
      return process.exit(1);
    })
    .then(async () => {
      try {
        const applicationPath = path.join(__dirname, './../..');
        child_process.execSync(`python2 ${applicationPath}/share/terrama2/scripts/update_database.py ${applicationPath} ${Application.getMode()}`);

        // loading terrama2 data
        await DataManager.load();
        // initialize service listeners
        await TcpService.init();
        // Listing Service Instances in order to start automatically on startup
        const services = await DataManager.listServiceInstances();

        logger.info('Trying to start TerraMA² services...');
        let hasError = false;
        for(let service of services) {
          try {
            await TcpService.start({ service: service.id });
          } catch (err) {
            hasError = true;
            // logger.error(`Could not start service ${service.name}: ${err.message}.`);
          }
        }
        if (hasError) {
          logger.warn('TerraMA² services have not started properly. Check the parameters on Administration Page.');
        }
      } catch (error) {
        console.error("Failed to update database.\n"+error);
        process.exit(1);
      }
    });
})()
