#!/bin/bash

INSTALL_COMMAND="npm"

function valid()
{
  if [ $1 -ne 0 ]; then
    printf "$2\n"
    exit 1
  fi
}

cd @TERRAMA2_DESTINATION@

sudo wget -qO geoserver-2.12.5-bin.zip -L https://ufpr.dl.sourceforge.net/project/geoserver/GeoServer/2.12.5/geoserver-2.12.5-bin.zip
sudo unzip geoserver-2.12.5-bin.zip

mkdir @TERRAMA2_DESTINATION@/webapp/node_modules
mkdir @TERRAMA2_DESTINATION@/webcomponents/node_modules
mkdir @TERRAMA2_DESTINATION@/webmonitor/node_modules

chmod 755 -R @TERRAMA2_DESTINATION@
chown 1000:1000 -R @TERRAMA2_DESTINATION@

printf "Post-installation script...\n"

sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres'"

(
  printf "Webapp dependencies...\n"
  cd @TERRAMA2_DESTINATION@webapp

  #
  # Install web dependencies
  #

  sudo -u $(id -gn 1000) ${INSTALL_COMMAND} install
  valid $? "Unable to install NodeJs dependencies."

  sudo -u $(id -gn 1000) npm run grunt
  valid $? "Error executing grunt.\n"

  chmod +x bin/webapp-stop.js
  chmod 755 bin/webapp-stop.js

  #
  # Create default config files
  #

  cd @TERRAMA2_DESTINATION@webapp/config
  if ! [ -f "settings.json" ]; then
    cp -a settings.json.example settings.json
  fi
)

(
  printf "Webcomponents dependencies...\n"
  cd @TERRAMA2_DESTINATION@webcomponents

  sudo -u $(id -gn 1000) ${INSTALL_COMMAND} install
  valid $? "Unable to install NodeJs dependencies."
  sudo -u $(id -gn 1000) npm run grunt
  valid $? "Error executing grunt."

  #
  # Create default config files
  #

  cd @TERRAMA2_DESTINATION@webapp/config
  if ! [ -f "db.json" ]; then
    cp -a db.json.example db.json
  fi
)

(
  printf "Webmonitor dependencies...\n"
  cd @TERRAMA2_DESTINATION@webmonitor

  #
  # Install web dependencies
  #

  sudo -u $(id -gn 1000) ${INSTALL_COMMAND} install
  valid $? "Unable to install NodeJs dependencies."

  sudo -u $(id -gn 1000) npm run grunt
  valid $? "Error executing grunt."

  #
  # Create default config files
  #

  cd @TERRAMA2_DESTINATION@webmonitor/config
  if ! [ -d "instances" ]; then
    cp -a sample_instances instances
  fi
)

# Check if pm2 is already installed
npm list pm2 -g
if [ $? != 0 ]; then
  printf "Configuring pm2...\n"
  # Install pm2
  npm install pm2 -g
  valid $? "Error installing pm2."
  chown 1000:1000 /home/$(id -gn 1000)/.pm2
  pm2 install pm2-logrotate
  valid $? "Error installing pm2-logrotate."
  # Allows the service to start with the system
  env PATH=$PATH:/usr/local/bin pm2 startup
  valid $? "Error adding pm2 to startup."
fi

# Add webapp to pm2 startup
(
  cd @TERRAMA2_DESTINATION@webapp
  pm2 delete webapp

  pm2 start npm --name webapp -- start
  valid $? "Error executing webapp."
  pm2 save
  valid $? "Error saving pm2 state."
)

# Add webmonitor to pm2 startup
(
  cd @TERRAMA2_DESTINATION@webmonitor
  pm2 delete webmonitor

  pm2 start npm --name webmonitor -- start
  valid $? "Error executing webmonitor."
  pm2 save
  valid $? "Error saving pm2 state."
)

# Add geoserver to pm2 startup

(
  cd @TERRAMA2_DESTINATION@geoserver-2.12.5/bin
  pm2 delete geoserver

  pm2 start startup.sh --name geoserver -- start
  valid $? "Error executing geoserver."
  pm2 save
  valid $? "Error saving pm2 state."
)

chown -R 1000:1000 /home/$(id -gn 1000)/.config
chown -R 1000:1000 /home/$(id -gn 1000)/.npm

printf "End post-installation script...\n\n"

exit 0