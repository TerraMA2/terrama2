  TerraMA2 Build Instructions
  ===========================


The build/cmake folder contains a CMake project for building TerraMA2.

Until now its build has been tested on:
  - Linux Ubuntu 14.04
  - Mac OS X Yosemite
  - Microsoft Windows 7

You should use at least CMake version 2.8.12 for building TerraMA2. Older versions than this may not work properly.

Make sure you have all the third-party library dependencies listed in the DEPENDENCIES file on the root of the codebase.

If you don't know which branch or tag to use for building TerraMA2, please see the BRANCHES-AND-TAGS file on the root of the codebase.

Follow the build steps below according to your platform.


1. Building on Linux with GNU G++
---------------------------------

1.1. Open a Command Prompt (Shell).

1.2. We will assume that the codebase (all the source tree) is located at:
/home/user/terrama2/codebase

1.3. Create a folder out of the TerraMA2 source tree, for example:
$ cd /home/user/terrama2
$ mkdir build-release
$ cd build-release

1.4. For Linux systems you must choose the build configuration:
$ cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE:STRING="Release" -DCMAKE_INSTALL_PREFIX:PATH="/usr/local/terrama2" -DCMAKE_PREFIX_PATH:PATH="/usr/local;/opt/external-libraries" ../codebase/build/cmake

Notes:

  a) Some Linux flavours with different versions of GNU gcc and Boost will need more parameters such as:
     -DCMAKE_INCLUDE_PATH:PATH="/usr/local;/opt/include"
     -DCMAKE_LIBRARY_PATH:PATH="/usr/local;/opt/lib"
     -DCMAKE_PROGRAM_PATH:PATH="/usr/local/bin;/opt/bin"
     -DBOOST_ROOT:PATH="/opt/boost"

  b) Boost can also be indicated by BOOST_INCLUDEDIR (note: without an '_' separating INCLUDE and DIR):
     -DBOOST_INCLUDEDIR:PATH="/usr/local/include"

  c) The parameter -lpthread must be informed only if your Boost was not built as a shared library:
     -DCMAKE_CXX_FLAGS:STRING="-lpthread"

  d) For building with Qt5 you can provide the Qt5_DIR variable as:
     -DQt5_DIR:PATH="/usr/local/lib/cmake/Qt5"

  e) For generating a debug version set CMAKE_BUILD_TYPE as:
     -DCMAKE_BUILD_TYPE:STRING="Debug"

  f) To turn on C++11 support:
     -DCMAKE_CXX_FLAGS:STRING="-std=c++11"

  g) To turn on the check of undefined macros, add the following flag:
     -DCMAKE_CXX_FLAGS:STRING="-Wundef"

  h) To run tests you must define a database that will be used to retrieve and store data:
     -DTERRAMA2_DATABASE_HOST="localhost"
     -DTERRAMA2_DATABASE_PORT=5432
     -DTERRAMA2_DATABASE_USERNAME="postgres"
     -DTERRAMA2_DATABASE_PASSWORD="postgres"
     -DTERRAMA2_DATABASE_DBNAME="terrama2"

1.5 Building (with 4 process in parallel):
$ make -j 4

1.6 Installing:
$ make install

1.7 Uninstalling:
$ make uninstall


2. Building on Mac OS X Yosemite
--------------------------------
TO BE DONE


3. Building on Microsoft Windows with Visual C++
------------------------------------------------
TO BE DONE


4. Using CMake-GUI and Xcode 7.0.1
----------------------------------

(!!Under Development!!)

4.1 We will assume that the codebase (all the source tree) is located at:
/Users/user/terrama2/codebase

4.2 Open CMake-GUI

4.3 Make sure that in the main window the "Grouped" and "Advanced" options are checked.

4.4 In the "Where is the source code" text box, please, add the location for the CMake scripts inside your codebase that will be used to generate the build project, for example:
/Users/user/terrama2/codebase/build/cmake

4.5 In the "Where to build the binaries" text box, please, add the location where the build project will be generated. You should give a location outside the source code tree, for exemple:
/Users/user/terrama2/build-xcode

4.6 Add the following entries (button "Add Entry"):
    - 1st entry:
       Name: CMAKE_INSTALL_PREFIX
       Type: PATH
       Value: /Users/user/myinstalls/terrama2
    - 2nd entry:
       Name: CMAKE_PREFIX_PATH
       Type: PATH
       Value: /Users/user/mylibs;/Users/user/mylibs/terralib5/lib/cmake;/Users/user/Qt5.4.1/5.4/clang_64/lib/cmake

4.7 Click the "Configure" button".

4.8 If everything is ok, please, click the "Generate" button".


5. Packing TerraMA2 on Linux Ubuntu 14.04
-----------------------------------------
TO BE DONE


6. Packing TerraMA2 on Mac OS X Yosemite
----------------------------------------
TO BE DONE


7. Packing TerraMA2 on Microsoft Windows
----------------------------------------
TO BE DONE


8. Quick Notes for Developers
-----------------------------------

If you have built TerraMA2 in Debug mode and you want to run it inside the build tree, you may need to set some environment variables depending where you have installed the third-party libraries (or dependencies).

In Mac OS X you play with the following variables:
$ export DYLD_FALLBACK_LIBRARY_PATH=/Users/user/MyLibs/lib
$ export DYLD_FALLBACK_FRAMEWORK_PATH=/Users/user/MyLibs/lib/

In Linux Ubuntu 14.04 you play with the following variables:
$ export LD_LIBRARY_PATH=/Users/user/MyLibs/lib

The TerraMA2 Developer's Guide contains more explanation about building TerraMA2:
https://trac.dpi.inpe.br/terrama2/wiki/programmersguide/buildfromsource

For more information on TerraMA2, please, visit its main web page at: http://www.dpi.inpe.br/terrama2.


  August 2015, TerraMA2 Team <terrama2-team@dpi.inpe.br>
